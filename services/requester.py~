#import logging
#import logging.config
#import yaml
#import configs as conf
import requests
from cachetools import TTLCache
from datetime import datetime, timedelta
from services.logger import get_logger

#log_conf = open('configs/logger.yaml')
#config = yaml.load(log_conf.read())
#logging.config.dictConfig(config)
#logger = logging.getLogger("requester")

logger = get_logger(loggername='requester')
cache = TTLCache(maxsize=conf.CACHE['maxsize'], ttl=conf.CACHE['ttl'])

def make_request(action='str', api='str', header=dict, **kwargs):
    """ makes the http request and returns a response """


    api_request = conf.URL + conf.API[api]
    #token = get_toke()
    token =  'Bearer '.__add__(get_token())
    response = requests.get(api_request, auth=('Authorization', token))
        
    
    print("api_request: ", api_request)
    print("action: ", action)
    print("params: ", kwargs)
    print("headers: ", header)
    response = {
        'action': action,
        'api': api,
        'header': header,
        'params': kwargs,
        'api_request': api_request,
        }
    print("response: ", response)
    return response


def get_token():
    """ returns the token for the request """

    #api_request = conf.URL + conf.API[api]

    # check if there is a token available in the cache
    
    token = cache.get('token',False)
    logger.debug("token from cache: %s", token)
    
    if token:
        print("last_verified: ", cache['last_verified'])
        token = token
        return token
    else:
        # make a login request to get a token and store it in the cache      
        api_request = conf.URL + conf.API['token']
        response = requests.post(api_request, data={'username': conf.AUTH['user'], 'password': conf.AUTH['password']})
        data = response.json()
        status_code = response.status_code

        logger.debug("response login request status_code: %s ", status_code)
        logger.debug("response login request json: %s ", data)
        
        if status_code == 200:
            cache['token'] = data['access']
            cache['refresh'] = data['refresh']
            logger.debug("now = %s", datetime.now())
            cache['last_verified'] = datetime.now()

            return cache['token']

        else:
            raise Exception("token can not be retrieved")
        


#401 unauthorized
#http GET 0.0.0.0:8000/spanglish/languages/ "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTM2Nzc5ODQ2LCJqdGkiOiIxM2NjNmMzY2M4NzI0YjM3ODYyNjZhNDRhNjZkNDhhOCIsInVzZXJfaWQiOjJ9.16flPNB3UeJgicDrOBL0xIH1b3sL3NhsHawSuQp-TZ0"


'''
http POST 0.0.0.0:8000/api/token/ username=omar password=myfedal2018
HTTP/1.1 200 OK
Allow: POST, OPTIONS
Content-Length: 438
Content-Type: application/json
Date: Wed, 07 Nov 2018 21:02:48 GMT
Server: WSGIServer/0.2 CPython/3.6.4
Vary: Accept
X-Frame-Options: SAMEORIGIN

{
    "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQxNzA5NzY4LCJqdGkiOiJlOWU5NjIyOGMyM2M0YmNlYjQ5NzFlZjUyNGUxMmViNiIsInVzZXJfaWQiOjJ9.kcMk6y_sl7gHnOYZt6q5E4JHXJ_GX8pOl4_2CR3MOSM",
    "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU0MTcxMDk2OCwianRpIjoiNjg3MDY0ODkxN2JiNGIzNjk5NjU4ODUzY2NiOGJiM2MiLCJ1c2VyX2lkIjoyfQ.T1DZ9OWhCTNCezsAlE34knnQO1aC3HrMwtz0pPWADa8"
}
'''

'''
http POST 0.0.0.0:8000/api/token/refresh/ refresh=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU0MTcxMDk2OCwianRpIjoiNjg3MDY0ODkxN2JiNGIzNjk5NjU4ODUzY2NiOGJiM2MiLCJ1c2VyX2lkIjoyfQ.T1DZ9OWhCTNCezsAlE34knnQO1aC3HrMwtz0pPWADa8
HTTP/1.1 200 OK
Allow: POST, OPTIONS
Content-Length: 218
Content-Type: application/json
Date: Wed, 07 Nov 2018 21:05:00 GMT
Server: WSGIServer/0.2 CPython/3.6.4
Vary: Accept
X-Frame-Options: SAMEORIGIN

{
    "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQxNzA5OTAwLCJqdGkiOiI5YTg2Nzg1M2UxOTA0ZGE5ODk5NzU2N2RlNTY3ZjBiOSIsInVzZXJfaWQiOjJ9.zeFovVcOlgqedFsUOfoDpeJYjoyJ8_k_Nei9SV7QH88"
}
'''
'''
http GET 0.0.0.0:8000/spanglish/languages/ "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQxNzA5OTAwLCJqdGkiOiI5YTg2Nzg1M2UxOTA0ZGE5ODk5NzU2N2RlNTY3ZjBiOSIsInVzZXJfaWQiOjJ9.zeFovVcOlgqedFsUOfoDpeJYjoyJ8_k_Nei9SV7QH88"
'''
